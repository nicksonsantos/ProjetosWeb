@page "/calculadora"

<h1>Calculadora</h1>

<p>Baseado em <a href="https://github.com/florinpop17/app-ideas/blob/master/Projects/1-Beginner/Calculator-App.md" target="_blank" rel="noopener noreferrer">florinpop17 - Calculator</a></p>

<hr />

&nbsp
&nbsp

<div class="container-fluid border border-primary rounded" style="width: 295px;">
    &nbsp
    <div class="row row-cols-auto g-0">
        <div class="col">
            <input type="text" id="visor" @bind="VisorOperacao" style="width: 268px; text-align:right;" readonly />
            <input type="text" id="visor" @bind="Visor" style="width: 268px; text-align:right;" readonly />
        </div>
    </div>
    &nbsp
    <div class="row row-cols-auto g-0">
        <div class="col">
            <button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg" @onclick="ApagaTudo">AC</button>
        </div>
        <div class="col">
            @Botao()
        </div>
        <div class="col">
            @Botao()
        </div>
        <div class="col justify-content-end">
            <button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg" @onclick="Apaga">C</button>
        </div>
    </div>
    <div class="row row-cols-auto g-0">
        <div class="col">
            <button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg" @onclick="() => Escreve(7)">7</button>
        </div>
        <div class="col">
            <button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg" @onclick="() => Escreve(8)">8</button>
        </div>
        <div class="col">
            <button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg" @onclick="() => Escreve(9)">9</button>
        </div>
        <div class="col">
            <button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg" @onclick="() => CliqueEmOperador('%')">%</button>
        </div>
    </div>
    <div class="row row-cols-auto g-0">
        <div class="col">
            <button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg" @onclick="() => Escreve(4)">4</button>
        </div>
        <div class="col">
            <button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg" @onclick="() => Escreve(5)">5</button>
        </div>
        <div class="col">
            <button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg" @onclick="() => Escreve(6)">6</button>
        </div>
        <div class="col">
            <button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg" @onclick="() => CliqueEmOperador('x')">x</button>
        </div>
    </div>
    <div class="row row-cols-auto g-0">
        <div class="col">
            <button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg" @onclick="() => Escreve(1)">1</button>
        </div>
        <div class="col">
            <button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg" @onclick="() => Escreve(2)">2</button>
        </div>
        <div class="col">
            <button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg" @onclick="() => Escreve(3)">3</button>
        </div>
        <div class="col">
            <button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg" @onclick="() => CliqueEmOperador('-')">-</button>
        </div>
    </div>
    <div class="row row-cols-auto g-0">
        <div class="col">
            <button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg" @onclick="() => Escreve(0)">0</button>
        </div>
        <div class="col">
            <button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg" @onclick="() => Escreve(',')">,</button>
        </div>
        <div class="col">
            <button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg" @onclick="Igual">=</button>
        </div>
        <div class="col">
            <button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg" @onclick="() => CliqueEmOperador('+')">+</button>
        </div>
    </div>
    &nbsp
</div>

<!--<button style="width: 67px;" type="button" class="btn btn-outline-primary btn-lg">=</button>-->
@code {
    public string? Visor { get; set; } = "0";
    public string? VisorOperacao { get; set; }
    private string? Operador { get; set; }
    private decimal Operando1 { get; set; }
    private decimal Operando2 { get; set; }


    private RenderFragment Botao(char valor)
    {
        return builder =>
        {
            builder.OpenElement(1, "button");
            builder.AddAttribute(2, "style", "width: 67px;");
            builder.AddAttribute(3, "type", "button");
            builder.AddAttribute(4, "class", "btn btn-outline-primary btn-lg");
            builder.AddAttribute(5, "onclick",
                Microsoft.AspNetCore.Components.EventCallback.Factory.Create(valor,
                    () => Escreve(valor)));
            builder.AddContent(6, valor);
            builder.CloseElement();
        };
    }

    private RenderFragment Botao(int valor)
    {
        return builder =>
        {
            builder.OpenElement(1, "button");
            builder.AddAttribute(2, "style", "width: 67px;");
            builder.AddAttribute(3, "type", "button");
            builder.AddAttribute(4, "class", "btn btn-outline-primary btn-lg");
            builder.AddAttribute(5, "onclick",
                Microsoft.AspNetCore.Components.EventCallback.Factory.Create(valor,
                    () => Escreve(valor)));
            builder.AddContent(6, valor);
            builder.CloseElement();
        };
    }

    private RenderFragment Botao()
    {
        return builder =>
        {
            builder.OpenElement(1, "button");
            builder.AddAttribute(2, "style", "width: 67px;;");
            builder.AddAttribute(3, "type", "button");
            builder.AddAttribute(4, "class", "btn btn-outline-primary btn-lg invisible");
            builder.AddContent(5, "F");
            builder.CloseElement();
        };
    }

    public void ApagaTudo()
    {
        Visor = "0";
        VisorOperacao = "";
        Operador = "";
        Operando1 = Decimal.Zero;
        Operando2 = Decimal.Zero;
        FlagSegundaParteDaOperacao = false;
        FlagOperadorPressionado = false;
    }

    public void Apaga()
    {
        if (VisorNaoEstaVazio() || Visor != "0")
            Visor = Visor.Remove(Visor.Length - 1);
    }

    private bool VisorNaoEstaVazio()
    {
        if (Visor == "" || Visor == null)
            return false;

        return true;
    }

    public void Escreve(char valorBotao)
    {
        string valorBotaoEmString = valorBotao.ToString();

        if (Visor == "0" && CaractereNaoEhOperador(valorBotaoEmString) && CaractereNaoEhVirgula(valorBotaoEmString))
        {
            Visor = valorBotaoEmString;
        }
        else
        {
            Visor += valorBotaoEmString;
        }
    }

    public void Escreve(int valorBotao)
    {
        string valorBotaoEmString = valorBotao.ToString();

        if (Visor == "0" && CaractereNaoEhOperador(valorBotaoEmString) && CaractereNaoEhVirgula(valorBotaoEmString))
        {
            Visor = valorBotaoEmString;
        }
        else
        {
            Visor += valorBotaoEmString;
        }
    }

    private bool FlagOperadorPressionado { get; set; }

    private bool FlagSegundaParteDaOperacao { get; set; }

    const char somarChar = '+';
    const char subtrairChar = '-';
    const char multplicarChar = 'x';
    const char dividirChar = '%';

    public void CliqueEmOperador()
    {
        string subStringVisor = String.Empty;

        try
        {
            if (VisorNaoEstaVazio())
            {
                foreach (var caractere in Visor)
                {

                    if (CaractereEhOperador(caractere))
                    {
                        Operador = Char.ToString(caractere);
                    }
                    else
                    {
                        subStringVisor += caractere;
                    }
                }

                if (FlagSegundaParteDaOperacao)
                {
                    Operando2 = decimal.Parse(subStringVisor);
                }
                else
                {
                    Operando1 = decimal.Parse(subStringVisor);
                    VisorOperacao = Visor;
                    ApagaVisor();
                    FlagSegundaParteDaOperacao = true;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Excecao: " + ex);
        }
    }

    public void CliqueEmOperador(char valorBotao)
    {

        try
        {

            if (VisorNaoEstaVazio())
            {

                if (FlagOperadorPressionado == false)
                {
                    Escreve(valorBotao);
                    FlagOperadorPressionado = true; 
                }



                //string subStringVisor = RetornaSubstringVisor();

                //if (FlagSegundaParteDaOperacao == false)
                //{                    
                //    Operando1 = decimal.Parse(subStringVisor);
                //    VisorOperacao = Visor;
                //    ApagaVisor();
                //    FlagSegundaParteDaOperacao = true;
                //}
                //else
                //{                    
                //    Operando2 = decimal.Parse(subStringVisor);
                //}
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine("Excecao: " + ex);
        }
    }


    //public void CliqueEmOperador(char valorBotao)
    //{
    //    FlagOperadorPressionado = true;

    //    if (!FlagSegundaParteDaOperacao)
    //        Escreve(valorBotao);

    //    try
    //    {
    //        if (VisorNaoEstaVazio())
    //        {
    //            string subStringVisor = RetornaSubstringVisor();

    //            if (FlagSegundaParteDaOperacao == false)
    //            {                    
    //                Operando1 = decimal.Parse(subStringVisor);
    //                VisorOperacao = Visor;
    //                ApagaVisor();
    //                FlagSegundaParteDaOperacao = true;
    //            }
    //            else
    //            {                    
    //                Operando2 = decimal.Parse(subStringVisor);
    //            }
    //        }

    //    }
    //    catch (Exception ex)
    //    {
    //        Console.WriteLine("Excecao: " + ex);
    //    }
    //}

    private string RetornaSubstringVisor()
    {
        string subStringVisor = String.Empty;

        foreach (var caractere in Visor)
        {
            if (CaractereEhOperador(caractere))
            {
                Operador = Char.ToString(caractere);
            }
            else
            {
                subStringVisor += caractere;
            }

        }

        return subStringVisor;
    }

    private bool CaractereEhOperador(char caractere)
    {
        string caractereEmString = Char.ToString(caractere);

        if (caractereEmString == "+" || caractereEmString == "-" ||
            caractereEmString == "x" || caractereEmString == "%")
        {
            return true;
        }

        return false;
    }

    private bool CaractereEhOperador(string caractere)
    {

        if (caractere == "+" || caractere == "-" ||
            caractere == "x" || caractere == "%")
        {
            return true;
        }

        return false;
    }

    private bool CaractereNaoEhOperador(char caractere)
    {
        string caractereEmString = Char.ToString(caractere);

        if (caractereEmString == "+" || caractereEmString == "-" ||
            caractereEmString == "x" || caractereEmString == "%")
        {
            return false;
        }

        return true;
    }

    private bool CaractereNaoEhOperador(string caractere)
    {

        if (caractere == "+" || caractere == "-" ||
            caractere == "x" || caractere == "%")
        {
            return false;
        }

        return true;
    }

    private bool CaractereNaoEhVirgula(string caractere)
    {
        if (caractere == ",")
            return false;

        return true;
    }

    public void ApagaVisor() => Visor = "";

    public void Igual()
    {
        if (VisorNaoEstaVazio())
        {
            try
            {
                CliqueEmOperador();
                decimal retornoOperacao = EfetucaOperacao();
                ApagaTudo();
                Visor = retornoOperacao.ToString();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Excecao" + ex);
            }

        }

    }

    private decimal EfetucaOperacao()
    {
        switch (Operador)
        {
            case "+": return Operando1 + Operando2;
            case "-": return Operando1 - Operando2;
            case "x": return Operando1 * Operando2;
            case "%": return Operando1 / Operando2;
            default: throw new Exception("Operacao Invalida");
        }
    }


}
